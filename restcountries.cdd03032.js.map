{"mappings":"AAaA,MAAMA,EAAW,CACfC,KAAMC,SAASC,cAAc,cAC7BC,cAAeF,SAASC,cAAc,sBACtCE,SAAUH,SAASC,cAAc,WACjCG,KAAMJ,SAASC,cAAc,aAG/BH,EAASK,SAASE,iBAAiB,SAGnC,WACEP,EAASI,cAAcI,mBACrB,YACA,uC,IALJR,EAASC,KAAKM,iBAAiB,UAS/BE,eAA6BC,GAC3BA,EAAIC,iBACJ,MACMC,EADW,IAAIC,SAASH,EAAII,eAE/BC,OAAO,WACPC,KAAIC,GAAQA,EAAKC,SACjBC,QAAOF,GAAQA,IAElB,IACE,MAAMG,QAUVX,eAAgCG,GAC9B,MAAMS,EAAW,uCACXC,QAAkBV,EAAUI,KAAIP,MAAMc,UACnBC,MAAM,GAAGH,IAAWE,MAC3BE,SAIlB,aADmBC,QAAQC,WAAWL,IAEnCH,QAAO,EAAGS,OAAOC,OAAEA,MAA0B,MAAXA,IAClCb,KAAI,EAACY,MAAEA,KAAYA,EAAM,GAAGE,QAAQ,I,CApBdC,CAAiBnB,GAClCoB,QAsBVvB,eAA8BW,GAC5B,MAAMC,EAAW,+BACXY,EAAY,iBACZC,EAAU,kCAEVZ,QAAkBF,EAASJ,KAAIP,MAAMqB,UAClBN,MACrB,GAAGH,IAAWY,SAAiBC,OAAaJ,cAG9BL,SAuBlB,aApBmBC,QAAQC,WAAWL,IAqBnCH,QAAO,EAACU,OAAEA,KAAwB,cAAXA,IACvBb,KAAI,EAAGY,OAAOO,QAAEA,EAAOC,SAAEA,OACxB,MAAMC,OACJA,EACAC,WAAWC,KAAEA,EAAIC,KAAEA,IACjBL,GACEM,KAAEA,EAAIlB,QAAEA,GAAYa,EAC1B,MAAO,C,QACLb,E,KACAkB,E,KACAD,E,KACAD,E,OACAF,EACD,G,CArEmBK,CAAetB,GACrCpB,EAASM,KAAKqC,UAAyBX,EAuF9BY,QACT,CAACC,GAAKtB,QAAEA,EAAOkB,KAAEA,EAAIJ,OAAEA,EAAME,KAAEA,EAAIC,KAAEA,KACnCK,EACA,2BACcN,WAAcC,sBACpBjB,uBACAkB,sBACDD,qBACAH,sBAET,G,CAhGA,MAAOS,GACPC,QAAQC,IAAIF,E,CACb,QACCpC,EAAIuC,OAAOC,O","sources":["src/js/restcountries.js"],"sourcesContent":["// async function serviceCountries() {\n//   //   const resp1 = fetch('https://restcountries.com/v3.1/name/Ukraine');\n//   //   const resp2 = fetch('https://restcountries.com/v3.1/name/France');\n//   //   const resp3 = fetch('https://restcountries.com/v3.1/name/Poland');\n//   const countries = ['Ukraine', 'France', 'Poland'];\n//   const responses = countries.map(async country => {\n//     const resp = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n//     return resp.json();\n//   });\n//   console.log(responses);\n// }\n// serviceCountries();\n\nconst elements = {\n  form: document.querySelector('.js-search'),\n  formContainer: document.querySelector('.js-form-container'),\n  addField: document.querySelector('.js-add'),\n  list: document.querySelector('.js-list'),\n};\n\nelements.addField.addEventListener('click', handlerAdd);\nelements.form.addEventListener('submit', handlerSearch);\n\nfunction handlerAdd() {\n  elements.formContainer.insertAdjacentHTML(\n    'beforeend',\n    '<input type=\"text\" name=\"country\" />'\n  );\n}\n\nasync function handlerSearch(evt) {\n  evt.preventDefault();\n  const formData = new FormData(evt.currentTarget);\n  const countries = formData\n    .getAll('country')\n    .map(item => item.trim())\n    .filter(item => item);\n\n  try {\n    const capitals = await serviceCountries(countries);\n    const weather = await serviceWeather(capitals);\n    elements.list.innerHTML = createMarkup(weather);\n  } catch (err) {\n    console.log(err);\n  } finally {\n    evt.target.reset();\n  }\n}\n\nasync function serviceCountries(countries) {\n  const BASE_URL = 'https://restcountries.com/v3.1/name/';\n  const responses = await countries.map(async country => {\n    const response = await fetch(`${BASE_URL}${country}`);\n    return response.json();\n  });\n\n  const data = await Promise.allSettled(responses);\n  return data\n    .filter(({ value: { status } }) => status !== 404)\n    .map(({ value }) => value[0].capital[0]);\n}\n\nasync function serviceWeather(capitals) {\n  const BASE_URL = 'http://api.weatherapi.com/v1';\n  const END_POINT = '/forecast.json';\n  const API_KEY = '86475d72b26d4cd290e161306231007';\n\n  const responses = await capitals.map(async capital => {\n    const response = await fetch(\n      `${BASE_URL}${END_POINT}?key=${API_KEY}&q=${capital}&lang=uk`\n    );\n\n    return response.json();\n  });\n\n  const data = await Promise.allSettled(responses);\n  //   return data\n  //     .filter(({ status }) => status === 'fulfilled')\n  //     .map(\n  //       ({\n  //         value: {\n  //           current: {\n  //             temp_c,\n  //             condition: { text, icon },\n  //           },\n  //           location: { country, name },\n  //         },\n  //       }) => ({\n  //         country,\n  //         name,\n  //         text,\n  //         icon,\n  //         temp_c,\n  //       })\n  //     );\n  return data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value: { current, location } }) => {\n      const {\n        temp_c,\n        condition: { icon, text },\n      } = current;\n      const { name, country } = location;\n      return {\n        country,\n        name,\n        text,\n        icon,\n        temp_c,\n      };\n    });\n}\n\n// Перебор массива с помощью map() - это для React\n// function createMarkup(arr) {\n//   return arr.map(\n//     ({ country, name, temp_c, icon, text }) => `<li>\n//         <img src=\"${icon}\" alt=\"${text}\" />\n//         <h2>${country}</h2>\n//         <h2>${name}</h2>\n//         <p>${text}</p>\n//         <p>${temp_c}</p>\n//       </li>`\n//   );\n// }\n\n// Перебор массива с помощью reduce()\nfunction createMarkup(arr) {\n  return arr.reduce(\n    (acc, { country, name, temp_c, icon, text }) =>\n      acc +\n      `<li>\n        <img src=\"${icon}\" alt=\"${text}\" />\n        <h2>${country}</h2>\n        <h2>${name}</h2>\n        <p>${text}</p>\n        <p>${temp_c}</p>\n      </li>`,\n    ''\n  );\n}\n"],"names":["$e35083a250cfb60a$var$elements","form","document","querySelector","formContainer","addField","list","addEventListener","insertAdjacentHTML","async","evt","preventDefault","countries","FormData","currentTarget","getAll","map","item","trim","filter","capitals","BASE_URL","responses","country","fetch","json","Promise","allSettled","value","status","capital","$e35083a250cfb60a$var$serviceCountries","weather","END_POINT","API_KEY","current","location","temp_c","condition","icon","text","name","$e35083a250cfb60a$var$serviceWeather","innerHTML","reduce","acc","err","console","log","target","reset"],"version":3,"file":"restcountries.cdd03032.js.map"}